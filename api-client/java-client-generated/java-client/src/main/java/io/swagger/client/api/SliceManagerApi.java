/*
 * Huawei Network Slice Management NBI
 * Author: Kevin McDonnell kwx420965
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.CreateSliceDataNetworkName;
import io.swagger.client.model.ViewSliceMetric;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class SliceManagerApi {
    private ApiClient apiClient;

    public SliceManagerApi() {
        this(Configuration.getDefaultApiClient());
    }

    public SliceManagerApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for nmsfSlicemanagerV1SlicesBySliceIdDelete
     * @param accept  (required)
     * @param contentType  (required)
     * @param authorization  (required)
     * @param sliceId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call nmsfSlicemanagerV1SlicesBySliceIdDeleteCall(String accept, String contentType, String authorization, String sliceId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/nmsf/slicemanager/v1/slices/{sliceId}"
            .replaceAll("\\{" + "sliceId" + "\\}", apiClient.escapeString(sliceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (accept != null)
        localVarHeaderParams.put("Accept", apiClient.parameterToString(accept));
        if (contentType != null)
        localVarHeaderParams.put("Content-Type", apiClient.parameterToString(contentType));
        if (authorization != null)
        localVarHeaderParams.put("Authorization", apiClient.parameterToString(authorization));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "auth" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call nmsfSlicemanagerV1SlicesBySliceIdDeleteValidateBeforeCall(String accept, String contentType, String authorization, String sliceId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling nmsfSlicemanagerV1SlicesBySliceIdDelete(Async)");
        }
        
        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling nmsfSlicemanagerV1SlicesBySliceIdDelete(Async)");
        }
        
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling nmsfSlicemanagerV1SlicesBySliceIdDelete(Async)");
        }
        
        // verify the required parameter 'sliceId' is set
        if (sliceId == null) {
            throw new ApiException("Missing the required parameter 'sliceId' when calling nmsfSlicemanagerV1SlicesBySliceIdDelete(Async)");
        }
        

        com.squareup.okhttp.Call call = nmsfSlicemanagerV1SlicesBySliceIdDeleteCall(accept, contentType, authorization, sliceId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete Slice
     * List the slices under the current tenant
     * @param accept  (required)
     * @param contentType  (required)
     * @param authorization  (required)
     * @param sliceId  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void nmsfSlicemanagerV1SlicesBySliceIdDelete(String accept, String contentType, String authorization, String sliceId) throws ApiException {
        nmsfSlicemanagerV1SlicesBySliceIdDeleteWithHttpInfo(accept, contentType, authorization, sliceId);
    }

    /**
     * Delete Slice
     * List the slices under the current tenant
     * @param accept  (required)
     * @param contentType  (required)
     * @param authorization  (required)
     * @param sliceId  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> nmsfSlicemanagerV1SlicesBySliceIdDeleteWithHttpInfo(String accept, String contentType, String authorization, String sliceId) throws ApiException {
        com.squareup.okhttp.Call call = nmsfSlicemanagerV1SlicesBySliceIdDeleteValidateBeforeCall(accept, contentType, authorization, sliceId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete Slice (asynchronously)
     * List the slices under the current tenant
     * @param accept  (required)
     * @param contentType  (required)
     * @param authorization  (required)
     * @param sliceId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call nmsfSlicemanagerV1SlicesBySliceIdDeleteAsync(String accept, String contentType, String authorization, String sliceId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = nmsfSlicemanagerV1SlicesBySliceIdDeleteValidateBeforeCall(accept, contentType, authorization, sliceId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for nmsfSlicemanagerV1SlicesBySliceIdGet
     * @param xAuthToken  (required)
     * @param sliceId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call nmsfSlicemanagerV1SlicesBySliceIdGetCall(String xAuthToken, String sliceId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/nmsf/slicemanager/v1/slices/{sliceId}"
            .replaceAll("\\{" + "sliceId" + "\\}", apiClient.escapeString(sliceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xAuthToken != null)
        localVarHeaderParams.put("X-Auth-Token", apiClient.parameterToString(xAuthToken));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call nmsfSlicemanagerV1SlicesBySliceIdGetValidateBeforeCall(String xAuthToken, String sliceId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'xAuthToken' is set
        if (xAuthToken == null) {
            throw new ApiException("Missing the required parameter 'xAuthToken' when calling nmsfSlicemanagerV1SlicesBySliceIdGet(Async)");
        }
        
        // verify the required parameter 'sliceId' is set
        if (sliceId == null) {
            throw new ApiException("Missing the required parameter 'sliceId' when calling nmsfSlicemanagerV1SlicesBySliceIdGet(Async)");
        }
        

        com.squareup.okhttp.Call call = nmsfSlicemanagerV1SlicesBySliceIdGetCall(xAuthToken, sliceId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get Slice
     * 
     * @param xAuthToken  (required)
     * @param sliceId  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void nmsfSlicemanagerV1SlicesBySliceIdGet(String xAuthToken, String sliceId) throws ApiException {
        nmsfSlicemanagerV1SlicesBySliceIdGetWithHttpInfo(xAuthToken, sliceId);
    }

    /**
     * Get Slice
     * 
     * @param xAuthToken  (required)
     * @param sliceId  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> nmsfSlicemanagerV1SlicesBySliceIdGetWithHttpInfo(String xAuthToken, String sliceId) throws ApiException {
        com.squareup.okhttp.Call call = nmsfSlicemanagerV1SlicesBySliceIdGetValidateBeforeCall(xAuthToken, sliceId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Get Slice (asynchronously)
     * 
     * @param xAuthToken  (required)
     * @param sliceId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call nmsfSlicemanagerV1SlicesBySliceIdGetAsync(String xAuthToken, String sliceId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = nmsfSlicemanagerV1SlicesBySliceIdGetValidateBeforeCall(xAuthToken, sliceId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for nmsfSlicemanagerV1SlicesBySliceIdPut
     * @param accept  (required)
     * @param contentType  (required)
     * @param authorization  (required)
     * @param sliceId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call nmsfSlicemanagerV1SlicesBySliceIdPutCall(String accept, String contentType, String authorization, String sliceId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/nmsf/slicemanager/v1/slices/{sliceId}"
            .replaceAll("\\{" + "sliceId" + "\\}", apiClient.escapeString(sliceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (accept != null)
        localVarHeaderParams.put("Accept", apiClient.parameterToString(accept));
        if (contentType != null)
        localVarHeaderParams.put("Content-Type", apiClient.parameterToString(contentType));
        if (authorization != null)
        localVarHeaderParams.put("Authorization", apiClient.parameterToString(authorization));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "auth" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call nmsfSlicemanagerV1SlicesBySliceIdPutValidateBeforeCall(String accept, String contentType, String authorization, String sliceId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling nmsfSlicemanagerV1SlicesBySliceIdPut(Async)");
        }
        
        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling nmsfSlicemanagerV1SlicesBySliceIdPut(Async)");
        }
        
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling nmsfSlicemanagerV1SlicesBySliceIdPut(Async)");
        }
        
        // verify the required parameter 'sliceId' is set
        if (sliceId == null) {
            throw new ApiException("Missing the required parameter 'sliceId' when calling nmsfSlicemanagerV1SlicesBySliceIdPut(Async)");
        }
        

        com.squareup.okhttp.Call call = nmsfSlicemanagerV1SlicesBySliceIdPutCall(accept, contentType, authorization, sliceId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Modify Slice
     * List the slices under the current tenant
     * @param accept  (required)
     * @param contentType  (required)
     * @param authorization  (required)
     * @param sliceId  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void nmsfSlicemanagerV1SlicesBySliceIdPut(String accept, String contentType, String authorization, String sliceId) throws ApiException {
        nmsfSlicemanagerV1SlicesBySliceIdPutWithHttpInfo(accept, contentType, authorization, sliceId);
    }

    /**
     * Modify Slice
     * List the slices under the current tenant
     * @param accept  (required)
     * @param contentType  (required)
     * @param authorization  (required)
     * @param sliceId  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> nmsfSlicemanagerV1SlicesBySliceIdPutWithHttpInfo(String accept, String contentType, String authorization, String sliceId) throws ApiException {
        com.squareup.okhttp.Call call = nmsfSlicemanagerV1SlicesBySliceIdPutValidateBeforeCall(accept, contentType, authorization, sliceId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Modify Slice (asynchronously)
     * List the slices under the current tenant
     * @param accept  (required)
     * @param contentType  (required)
     * @param authorization  (required)
     * @param sliceId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call nmsfSlicemanagerV1SlicesBySliceIdPutAsync(String accept, String contentType, String authorization, String sliceId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = nmsfSlicemanagerV1SlicesBySliceIdPutValidateBeforeCall(accept, contentType, authorization, sliceId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for nmsfSlicemanagerV1SlicesGet
     * @param startIndex  (required)
     * @param accept  (required)
     * @param contentType  (required)
     * @param authorization  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call nmsfSlicemanagerV1SlicesGetCall(String startIndex, String accept, String contentType, String authorization, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/nmsf/slicemanager/v1/slices";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (startIndex != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("startIndex", startIndex));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (accept != null)
        localVarHeaderParams.put("Accept", apiClient.parameterToString(accept));
        if (contentType != null)
        localVarHeaderParams.put("Content-Type", apiClient.parameterToString(contentType));
        if (authorization != null)
        localVarHeaderParams.put("Authorization", apiClient.parameterToString(authorization));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "auth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call nmsfSlicemanagerV1SlicesGetValidateBeforeCall(String startIndex, String accept, String contentType, String authorization, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'startIndex' is set
        if (startIndex == null) {
            throw new ApiException("Missing the required parameter 'startIndex' when calling nmsfSlicemanagerV1SlicesGet(Async)");
        }
        
        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling nmsfSlicemanagerV1SlicesGet(Async)");
        }
        
        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling nmsfSlicemanagerV1SlicesGet(Async)");
        }
        
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling nmsfSlicemanagerV1SlicesGet(Async)");
        }
        

        com.squareup.okhttp.Call call = nmsfSlicemanagerV1SlicesGetCall(startIndex, accept, contentType, authorization, progressListener, progressRequestListener);
        return call;

    }

    /**
     * List Slices
     * List the slices under the current tenant
     * @param startIndex  (required)
     * @param accept  (required)
     * @param contentType  (required)
     * @param authorization  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void nmsfSlicemanagerV1SlicesGet(String startIndex, String accept, String contentType, String authorization) throws ApiException {
        nmsfSlicemanagerV1SlicesGetWithHttpInfo(startIndex, accept, contentType, authorization);
    }

    /**
     * List Slices
     * List the slices under the current tenant
     * @param startIndex  (required)
     * @param accept  (required)
     * @param contentType  (required)
     * @param authorization  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> nmsfSlicemanagerV1SlicesGetWithHttpInfo(String startIndex, String accept, String contentType, String authorization) throws ApiException {
        com.squareup.okhttp.Call call = nmsfSlicemanagerV1SlicesGetValidateBeforeCall(startIndex, accept, contentType, authorization, null, null);
        return apiClient.execute(call);
    }

    /**
     * List Slices (asynchronously)
     * List the slices under the current tenant
     * @param startIndex  (required)
     * @param accept  (required)
     * @param contentType  (required)
     * @param authorization  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call nmsfSlicemanagerV1SlicesGetAsync(String startIndex, String accept, String contentType, String authorization, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = nmsfSlicemanagerV1SlicesGetValidateBeforeCall(startIndex, accept, contentType, authorization, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for nmsfSlicemanagerV1SlicesMetricsBySliceIdAndMetricNameGet
     * @param xAuthToken  (required)
     * @param sliceId  (required)
     * @param metricName  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call nmsfSlicemanagerV1SlicesMetricsBySliceIdAndMetricNameGetCall(String xAuthToken, String sliceId, String metricName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/nmsf/slicemanager/v1/slices/{sliceId}/metrics/{metricName}"
            .replaceAll("\\{" + "sliceId" + "\\}", apiClient.escapeString(sliceId.toString()))
            .replaceAll("\\{" + "metricName" + "\\}", apiClient.escapeString(metricName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xAuthToken != null)
        localVarHeaderParams.put("X-Auth-Token", apiClient.parameterToString(xAuthToken));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call nmsfSlicemanagerV1SlicesMetricsBySliceIdAndMetricNameGetValidateBeforeCall(String xAuthToken, String sliceId, String metricName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'xAuthToken' is set
        if (xAuthToken == null) {
            throw new ApiException("Missing the required parameter 'xAuthToken' when calling nmsfSlicemanagerV1SlicesMetricsBySliceIdAndMetricNameGet(Async)");
        }
        
        // verify the required parameter 'sliceId' is set
        if (sliceId == null) {
            throw new ApiException("Missing the required parameter 'sliceId' when calling nmsfSlicemanagerV1SlicesMetricsBySliceIdAndMetricNameGet(Async)");
        }
        
        // verify the required parameter 'metricName' is set
        if (metricName == null) {
            throw new ApiException("Missing the required parameter 'metricName' when calling nmsfSlicemanagerV1SlicesMetricsBySliceIdAndMetricNameGet(Async)");
        }
        

        com.squareup.okhttp.Call call = nmsfSlicemanagerV1SlicesMetricsBySliceIdAndMetricNameGetCall(xAuthToken, sliceId, metricName, progressListener, progressRequestListener);
        return call;

    }

    /**
     * View Slice Metric
     * 
     * @param xAuthToken  (required)
     * @param sliceId  (required)
     * @param metricName  (required)
     * @return ViewSliceMetric
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ViewSliceMetric nmsfSlicemanagerV1SlicesMetricsBySliceIdAndMetricNameGet(String xAuthToken, String sliceId, String metricName) throws ApiException {
        ApiResponse<ViewSliceMetric> resp = nmsfSlicemanagerV1SlicesMetricsBySliceIdAndMetricNameGetWithHttpInfo(xAuthToken, sliceId, metricName);
        return resp.getData();
    }

    /**
     * View Slice Metric
     * 
     * @param xAuthToken  (required)
     * @param sliceId  (required)
     * @param metricName  (required)
     * @return ApiResponse&lt;ViewSliceMetric&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ViewSliceMetric> nmsfSlicemanagerV1SlicesMetricsBySliceIdAndMetricNameGetWithHttpInfo(String xAuthToken, String sliceId, String metricName) throws ApiException {
        com.squareup.okhttp.Call call = nmsfSlicemanagerV1SlicesMetricsBySliceIdAndMetricNameGetValidateBeforeCall(xAuthToken, sliceId, metricName, null, null);
        Type localVarReturnType = new TypeToken<ViewSliceMetric>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * View Slice Metric (asynchronously)
     * 
     * @param xAuthToken  (required)
     * @param sliceId  (required)
     * @param metricName  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call nmsfSlicemanagerV1SlicesMetricsBySliceIdAndMetricNameGetAsync(String xAuthToken, String sliceId, String metricName, final ApiCallback<ViewSliceMetric> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = nmsfSlicemanagerV1SlicesMetricsBySliceIdAndMetricNameGetValidateBeforeCall(xAuthToken, sliceId, metricName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ViewSliceMetric>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for nmsfSlicemanagerV1SlicesOperationsBySliceIdAndOperationIdGet
     * @param xAuthToken  (required)
     * @param sliceId  (required)
     * @param operationId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call nmsfSlicemanagerV1SlicesOperationsBySliceIdAndOperationIdGetCall(String xAuthToken, String sliceId, String operationId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/nmsf/slicemanager/v1/slices/{sliceId}/operations/{operationId}"
            .replaceAll("\\{" + "sliceId" + "\\}", apiClient.escapeString(sliceId.toString()))
            .replaceAll("\\{" + "operationId" + "\\}", apiClient.escapeString(operationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xAuthToken != null)
        localVarHeaderParams.put("X-Auth-Token", apiClient.parameterToString(xAuthToken));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call nmsfSlicemanagerV1SlicesOperationsBySliceIdAndOperationIdGetValidateBeforeCall(String xAuthToken, String sliceId, String operationId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'xAuthToken' is set
        if (xAuthToken == null) {
            throw new ApiException("Missing the required parameter 'xAuthToken' when calling nmsfSlicemanagerV1SlicesOperationsBySliceIdAndOperationIdGet(Async)");
        }
        
        // verify the required parameter 'sliceId' is set
        if (sliceId == null) {
            throw new ApiException("Missing the required parameter 'sliceId' when calling nmsfSlicemanagerV1SlicesOperationsBySliceIdAndOperationIdGet(Async)");
        }
        
        // verify the required parameter 'operationId' is set
        if (operationId == null) {
            throw new ApiException("Missing the required parameter 'operationId' when calling nmsfSlicemanagerV1SlicesOperationsBySliceIdAndOperationIdGet(Async)");
        }
        

        com.squareup.okhttp.Call call = nmsfSlicemanagerV1SlicesOperationsBySliceIdAndOperationIdGetCall(xAuthToken, sliceId, operationId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * View Slice Operations
     * This interface is used to query performance Metrics such as the delay and traffic of slices.  Queries Metrics based on the slice ID and Metric name and returns the latest Metric values in the system. The returned content includes: Time, value
     * @param xAuthToken  (required)
     * @param sliceId  (required)
     * @param operationId  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Object nmsfSlicemanagerV1SlicesOperationsBySliceIdAndOperationIdGet(String xAuthToken, String sliceId, String operationId) throws ApiException {
        ApiResponse<Object> resp = nmsfSlicemanagerV1SlicesOperationsBySliceIdAndOperationIdGetWithHttpInfo(xAuthToken, sliceId, operationId);
        return resp.getData();
    }

    /**
     * View Slice Operations
     * This interface is used to query performance Metrics such as the delay and traffic of slices.  Queries Metrics based on the slice ID and Metric name and returns the latest Metric values in the system. The returned content includes: Time, value
     * @param xAuthToken  (required)
     * @param sliceId  (required)
     * @param operationId  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Object> nmsfSlicemanagerV1SlicesOperationsBySliceIdAndOperationIdGetWithHttpInfo(String xAuthToken, String sliceId, String operationId) throws ApiException {
        com.squareup.okhttp.Call call = nmsfSlicemanagerV1SlicesOperationsBySliceIdAndOperationIdGetValidateBeforeCall(xAuthToken, sliceId, operationId, null, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * View Slice Operations (asynchronously)
     * This interface is used to query performance Metrics such as the delay and traffic of slices.  Queries Metrics based on the slice ID and Metric name and returns the latest Metric values in the system. The returned content includes: Time, value
     * @param xAuthToken  (required)
     * @param sliceId  (required)
     * @param operationId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call nmsfSlicemanagerV1SlicesOperationsBySliceIdAndOperationIdGetAsync(String xAuthToken, String sliceId, String operationId, final ApiCallback<Object> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = nmsfSlicemanagerV1SlicesOperationsBySliceIdAndOperationIdGetValidateBeforeCall(xAuthToken, sliceId, operationId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for nmsfSlicemanagerV1SlicesPost
     * @param templateId  (required)
     * @param name  (required)
     * @param onfailure  (required)
     * @param description  (required)
     * @param parameters  (required)
     * @param xAuthToken  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call nmsfSlicemanagerV1SlicesPostCall(String templateId, String name, String onfailure, String description, String parameters, String xAuthToken, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/nmsf/slicemanager/v1/slices";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xAuthToken != null)
        localVarHeaderParams.put("X-Auth-Token", apiClient.parameterToString(xAuthToken));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (templateId != null)
        localVarFormParams.put("template_id", templateId);
        if (name != null)
        localVarFormParams.put("name", name);
        if (onfailure != null)
        localVarFormParams.put("onfailure", onfailure);
        if (description != null)
        localVarFormParams.put("description", description);
        if (parameters != null)
        localVarFormParams.put("parameters", parameters);

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call nmsfSlicemanagerV1SlicesPostValidateBeforeCall(String templateId, String name, String onfailure, String description, String parameters, String xAuthToken, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'templateId' is set
        if (templateId == null) {
            throw new ApiException("Missing the required parameter 'templateId' when calling nmsfSlicemanagerV1SlicesPost(Async)");
        }
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling nmsfSlicemanagerV1SlicesPost(Async)");
        }
        
        // verify the required parameter 'onfailure' is set
        if (onfailure == null) {
            throw new ApiException("Missing the required parameter 'onfailure' when calling nmsfSlicemanagerV1SlicesPost(Async)");
        }
        
        // verify the required parameter 'description' is set
        if (description == null) {
            throw new ApiException("Missing the required parameter 'description' when calling nmsfSlicemanagerV1SlicesPost(Async)");
        }
        
        // verify the required parameter 'parameters' is set
        if (parameters == null) {
            throw new ApiException("Missing the required parameter 'parameters' when calling nmsfSlicemanagerV1SlicesPost(Async)");
        }
        
        // verify the required parameter 'xAuthToken' is set
        if (xAuthToken == null) {
            throw new ApiException("Missing the required parameter 'xAuthToken' when calling nmsfSlicemanagerV1SlicesPost(Async)");
        }
        

        com.squareup.okhttp.Call call = nmsfSlicemanagerV1SlicesPostCall(templateId, name, onfailure, description, parameters, xAuthToken, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create Slice
     * createbyServiceName
     * @param templateId  (required)
     * @param name  (required)
     * @param onfailure  (required)
     * @param description  (required)
     * @param parameters  (required)
     * @param xAuthToken  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void nmsfSlicemanagerV1SlicesPost(String templateId, String name, String onfailure, String description, String parameters, String xAuthToken) throws ApiException {
        nmsfSlicemanagerV1SlicesPostWithHttpInfo(templateId, name, onfailure, description, parameters, xAuthToken);
    }

    /**
     * Create Slice
     * createbyServiceName
     * @param templateId  (required)
     * @param name  (required)
     * @param onfailure  (required)
     * @param description  (required)
     * @param parameters  (required)
     * @param xAuthToken  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> nmsfSlicemanagerV1SlicesPostWithHttpInfo(String templateId, String name, String onfailure, String description, String parameters, String xAuthToken) throws ApiException {
        com.squareup.okhttp.Call call = nmsfSlicemanagerV1SlicesPostValidateBeforeCall(templateId, name, onfailure, description, parameters, xAuthToken, null, null);
        return apiClient.execute(call);
    }

    /**
     * Create Slice (asynchronously)
     * createbyServiceName
     * @param templateId  (required)
     * @param name  (required)
     * @param onfailure  (required)
     * @param description  (required)
     * @param parameters  (required)
     * @param xAuthToken  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call nmsfSlicemanagerV1SlicesPostAsync(String templateId, String name, String onfailure, String description, String parameters, String xAuthToken, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = nmsfSlicemanagerV1SlicesPostValidateBeforeCall(templateId, name, onfailure, description, parameters, xAuthToken, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for restServicemanagerV1ServicesGet
     * @param xAuthToken  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call restServicemanagerV1ServicesGetCall(String xAuthToken, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rest/servicemanager/v1/services";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xAuthToken != null)
        localVarHeaderParams.put("X-Auth-Token", apiClient.parameterToString(xAuthToken));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call restServicemanagerV1ServicesGetValidateBeforeCall(String xAuthToken, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'xAuthToken' is set
        if (xAuthToken == null) {
            throw new ApiException("Missing the required parameter 'xAuthToken' when calling restServicemanagerV1ServicesGet(Async)");
        }
        

        com.squareup.okhttp.Call call = restServicemanagerV1ServicesGetCall(xAuthToken, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Query Slice
     * 
     * @param xAuthToken  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void restServicemanagerV1ServicesGet(String xAuthToken) throws ApiException {
        restServicemanagerV1ServicesGetWithHttpInfo(xAuthToken);
    }

    /**
     * Query Slice
     * 
     * @param xAuthToken  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> restServicemanagerV1ServicesGetWithHttpInfo(String xAuthToken) throws ApiException {
        com.squareup.okhttp.Call call = restServicemanagerV1ServicesGetValidateBeforeCall(xAuthToken, null, null);
        return apiClient.execute(call);
    }

    /**
     * Query Slice (asynchronously)
     * 
     * @param xAuthToken  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call restServicemanagerV1ServicesGetAsync(String xAuthToken, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = restServicemanagerV1ServicesGetValidateBeforeCall(xAuthToken, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for slicesPost2
     * @param templateId  (required)
     * @param name  (required)
     * @param onfailure  (required)
     * @param description  (required)
     * @param parameters  (required)
     * @param dataNetworkName  (required)
     * @param xAuthToken  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call slicesPost2Call(String templateId, String name, String onfailure, String description, String parameters, String dataNetworkName, String xAuthToken, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/slices";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xAuthToken != null)
        localVarHeaderParams.put("X-Auth-Token", apiClient.parameterToString(xAuthToken));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (templateId != null)
        localVarFormParams.put("template_id", templateId);
        if (name != null)
        localVarFormParams.put("name", name);
        if (onfailure != null)
        localVarFormParams.put("onfailure", onfailure);
        if (description != null)
        localVarFormParams.put("description", description);
        if (parameters != null)
        localVarFormParams.put("parameters", parameters);
        if (dataNetworkName != null)
        localVarFormParams.put("dataNetworkName", dataNetworkName);

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call slicesPost2ValidateBeforeCall(String templateId, String name, String onfailure, String description, String parameters, String dataNetworkName, String xAuthToken, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'templateId' is set
        if (templateId == null) {
            throw new ApiException("Missing the required parameter 'templateId' when calling slicesPost2(Async)");
        }
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling slicesPost2(Async)");
        }
        
        // verify the required parameter 'onfailure' is set
        if (onfailure == null) {
            throw new ApiException("Missing the required parameter 'onfailure' when calling slicesPost2(Async)");
        }
        
        // verify the required parameter 'description' is set
        if (description == null) {
            throw new ApiException("Missing the required parameter 'description' when calling slicesPost2(Async)");
        }
        
        // verify the required parameter 'parameters' is set
        if (parameters == null) {
            throw new ApiException("Missing the required parameter 'parameters' when calling slicesPost2(Async)");
        }
        
        // verify the required parameter 'dataNetworkName' is set
        if (dataNetworkName == null) {
            throw new ApiException("Missing the required parameter 'dataNetworkName' when calling slicesPost2(Async)");
        }
        
        // verify the required parameter 'xAuthToken' is set
        if (xAuthToken == null) {
            throw new ApiException("Missing the required parameter 'xAuthToken' when calling slicesPost2(Async)");
        }
        

        com.squareup.okhttp.Call call = slicesPost2Call(templateId, name, onfailure, description, parameters, dataNetworkName, xAuthToken, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create Slice - Data Network Name
     * This interface is used to create a slice instance using a nominated DNN or APN.   This means the access network part of the slice is shared, and not sliced.
     * @param templateId  (required)
     * @param name  (required)
     * @param onfailure  (required)
     * @param description  (required)
     * @param parameters  (required)
     * @param dataNetworkName  (required)
     * @param xAuthToken  (required)
     * @return CreateSliceDataNetworkName
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CreateSliceDataNetworkName slicesPost2(String templateId, String name, String onfailure, String description, String parameters, String dataNetworkName, String xAuthToken) throws ApiException {
        ApiResponse<CreateSliceDataNetworkName> resp = slicesPost2WithHttpInfo(templateId, name, onfailure, description, parameters, dataNetworkName, xAuthToken);
        return resp.getData();
    }

    /**
     * Create Slice - Data Network Name
     * This interface is used to create a slice instance using a nominated DNN or APN.   This means the access network part of the slice is shared, and not sliced.
     * @param templateId  (required)
     * @param name  (required)
     * @param onfailure  (required)
     * @param description  (required)
     * @param parameters  (required)
     * @param dataNetworkName  (required)
     * @param xAuthToken  (required)
     * @return ApiResponse&lt;CreateSliceDataNetworkName&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CreateSliceDataNetworkName> slicesPost2WithHttpInfo(String templateId, String name, String onfailure, String description, String parameters, String dataNetworkName, String xAuthToken) throws ApiException {
        com.squareup.okhttp.Call call = slicesPost2ValidateBeforeCall(templateId, name, onfailure, description, parameters, dataNetworkName, xAuthToken, null, null);
        Type localVarReturnType = new TypeToken<CreateSliceDataNetworkName>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create Slice - Data Network Name (asynchronously)
     * This interface is used to create a slice instance using a nominated DNN or APN.   This means the access network part of the slice is shared, and not sliced.
     * @param templateId  (required)
     * @param name  (required)
     * @param onfailure  (required)
     * @param description  (required)
     * @param parameters  (required)
     * @param dataNetworkName  (required)
     * @param xAuthToken  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call slicesPost2Async(String templateId, String name, String onfailure, String description, String parameters, String dataNetworkName, String xAuthToken, final ApiCallback<CreateSliceDataNetworkName> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = slicesPost2ValidateBeforeCall(templateId, name, onfailure, description, parameters, dataNetworkName, xAuthToken, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CreateSliceDataNetworkName>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
