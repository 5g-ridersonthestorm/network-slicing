/*
 * Huawei Network Slice Management NBI
 * Author: Kevin McDonnell kwx420965
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiException;
import io.swagger.client.model.CreateSliceDataNetworkName;
import io.swagger.client.model.ViewSliceMetric;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for SliceManagerApi
 */
@Ignore
public class SliceManagerApiTest {

    private final SliceManagerApi api = new SliceManagerApi();

    
    /**
     * Delete Slice
     *
     * List the slices under the current tenant
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void nmsfSlicemanagerV1SlicesBySliceIdDeleteTest() throws ApiException {
        String accept = null;
        String contentType = null;
        String authorization = null;
        String sliceId = null;
        api.nmsfSlicemanagerV1SlicesBySliceIdDelete(accept, contentType, authorization, sliceId);

        // TODO: test validations
    }
    
    /**
     * Get Slice
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void nmsfSlicemanagerV1SlicesBySliceIdGetTest() throws ApiException {
        String xAuthToken = null;
        String sliceId = null;
        api.nmsfSlicemanagerV1SlicesBySliceIdGet(xAuthToken, sliceId);

        // TODO: test validations
    }
    
    /**
     * Modify Slice
     *
     * List the slices under the current tenant
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void nmsfSlicemanagerV1SlicesBySliceIdPutTest() throws ApiException {
        String accept = null;
        String contentType = null;
        String authorization = null;
        String sliceId = null;
        api.nmsfSlicemanagerV1SlicesBySliceIdPut(accept, contentType, authorization, sliceId);

        // TODO: test validations
    }
    
    /**
     * List Slices
     *
     * List the slices under the current tenant
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void nmsfSlicemanagerV1SlicesGetTest() throws ApiException {
        String startIndex = null;
        String accept = null;
        String contentType = null;
        String authorization = null;
        api.nmsfSlicemanagerV1SlicesGet(startIndex, accept, contentType, authorization);

        // TODO: test validations
    }
    
    /**
     * View Slice Metric
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void nmsfSlicemanagerV1SlicesMetricsBySliceIdAndMetricNameGetTest() throws ApiException {
        String xAuthToken = null;
        String sliceId = null;
        String metricName = null;
        ViewSliceMetric response = api.nmsfSlicemanagerV1SlicesMetricsBySliceIdAndMetricNameGet(xAuthToken, sliceId, metricName);

        // TODO: test validations
    }
    
    /**
     * View Slice Operations
     *
     * This interface is used to query performance Metrics such as the delay and traffic of slices.  Queries Metrics based on the slice ID and Metric name and returns the latest Metric values in the system. The returned content includes: Time, value
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void nmsfSlicemanagerV1SlicesOperationsBySliceIdAndOperationIdGetTest() throws ApiException {
        String xAuthToken = null;
        String sliceId = null;
        String operationId = null;
        Object response = api.nmsfSlicemanagerV1SlicesOperationsBySliceIdAndOperationIdGet(xAuthToken, sliceId, operationId);

        // TODO: test validations
    }
    
    /**
     * Create Slice
     *
     * createbyServiceName
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void nmsfSlicemanagerV1SlicesPostTest() throws ApiException {
        String templateId = null;
        String name = null;
        String onfailure = null;
        String description = null;
        String parameters = null;
        String xAuthToken = null;
        api.nmsfSlicemanagerV1SlicesPost(templateId, name, onfailure, description, parameters, xAuthToken);

        // TODO: test validations
    }
    
    /**
     * Query Slice
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void restServicemanagerV1ServicesGetTest() throws ApiException {
        String xAuthToken = null;
        api.restServicemanagerV1ServicesGet(xAuthToken);

        // TODO: test validations
    }
    
    /**
     * Create Slice - Data Network Name
     *
     * This interface is used to create a slice instance using a nominated DNN or APN.   This means the access network part of the slice is shared, and not sliced.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void slicesPost2Test() throws ApiException {
        String templateId = null;
        String name = null;
        String onfailure = null;
        String description = null;
        String parameters = null;
        String dataNetworkName = null;
        String xAuthToken = null;
        CreateSliceDataNetworkName response = api.slicesPost2(templateId, name, onfailure, description, parameters, dataNetworkName, xAuthToken);

        // TODO: test validations
    }
    
}
